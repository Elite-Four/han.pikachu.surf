<template>
<div>
  <text-field prop-word="{= word =}"></text-field>
  <result-panel prop-result="{= result =}"></result-panel>
</div>
</template>

<script>
import fetchJsonp from 'fetch-jsonp'
import {debounce} from 'lodash'
import ResultPanel from './ResultPanel.san'
import TextField from './TextField.san'
import {router, Link} from 'san-router'

export default {
  components: {
    'router-link': Link,
    'result-panel': ResultPanel,
    'text-field': TextField
  },
  initData () {
    return {
      word: '',
      result: []
    }
  },
  updateQuery (word) {
    this.data.set('word', word)
    this.query(word)
  },
  routerChangeHandler (e, config) {
    this.updateQuery(e.query.word)
  },
  async query (val) {
    const data = await fetchJsonp(`http://app.tgbus.com/kanji/ToJp.ashx?keyword=${encodeURIComponent(val)}&encode=gb2312&app=3ds`).then(res => res.json())
    const result = []
    global.history.pushState({}, val, `/#/${val}`)
    for (const key in data) {
      const kanji = data[key].kanji.length ? data[key].kanji : [data[key].kanji]
      result.push({
        han: key,
        kanji: kanji
      })
    }
    this.data.set('result', result)
  },
  attached () {
    const word = this.data.get('route').query.word
    this.updateQuery(word)
    this.watch('word', debounce(this.query, 500))
    this.routerChangeHandler = this.routerChangeHandler.bind(this)
    router.listen(this.routerChangeHandler)
  },
  detached () {
    router.unlisten(this.routerChangeHandler)
  }
}
</script>