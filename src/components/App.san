<template>
<div>
  <h1>æ¼¢</h1>
  <text-field word="{= word =}" loading="{= isLoading =}" on-submit="redirect"></text-field>
  <result-panel result="{= result =}"></result-panel>
</div>
</template>

<script>
// import {debounce} from 'lodash'
import ResultPanel from './ResultPanel.san'
import TextField from './TextField.san'
import {router, Link} from 'san-router'
import note from '../note'

export default {
  components: {
    'router-link': Link,
    'result-panel': ResultPanel,
    'text-field': TextField
  },
  initData () {
    return {
      word: '',
      result: [],
      isLoading: false,
    }
  },
  updateQuery (word) {
    this.data.set('word', word)
    this.query(word)
  },
  routerChangeHandler (e, config) {
    this.updateQuery(this.decode(e.query.word))
  },
  decode (word) {
    return decodeURIComponent(word || '')
  },
  encode (word) {
    return encodeURIComponent(word || '')
  },
  redirect (word) {
    router.locator.redirect(`/${this.encode(word)}`)
  },
  async query (val) {
    this.data.set('isLoading', true)
    const result = []
    let res
    for (const str of Array.from(new Set(val))) {
      const localData = localStorage.getItem(str)
      if (localData) {
        res = JSON.parse(localData)
      }
      else {
        try {
          res = await fetch(`/dict/${str}.json`).then(res => res.json())
          localStorage.setItem(str, JSON.stringify(res))
        }
        catch (e) {
          res = [str]
        }
      }

      const item = {
        han: res[0],
        kanji: []
      }
      for (let i = 1; i < res.length; i++) {
        item.kanji[i - 1] = {
          onyomi: note(res[i][0]),
          kunyomi: note(res[i][1])
        }
      }
      result.push(item)
    }
    if (this.data) {
      this.data.set('isLoading', false)
      this.data.set('result', result)
    }
  },
  attached () {
    const word = this.data.get('route').query.word
    this.updateQuery(this.decode(word))
    // this.watch('word', debounce(this.redirect, 500))
    this.routerChangeHandler = this.routerChangeHandler.bind(this)
    router.listen(this.routerChangeHandler)
  },
  detached () {
    router.unlisten(this.routerChangeHandler)
  }
}
</script>

<style lang="stylus">
html
  font-size 100px
  color #333
  // background-color #345
  background-size 140px 240px
body
  margin 0
h1
  font-size .36rem
  text-align center

footer
  font-size .12rem
  text-align center
*
  box-sizing border-box

@media (max-width: 639px)
  body
    padding-top .5rem
  h1
    display none

@media (min-width: 640px)
  h1
    display block
</style>