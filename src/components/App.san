<template>
<div>
  <h1>æ¼¢</h1>
  <text-field prop-word="{= word =}" prop-loading="{= isLoading =}"></text-field>
  <result-panel prop-result="{= result =}"></result-panel>
</div>
</template>

<script>
import fetchJsonp from 'fetch-jsonp'
import {debounce} from 'lodash'
import ResultPanel from './ResultPanel.san'
import TextField from './TextField.san'
import {router, Link} from 'san-router'

export default {
  components: {
    'router-link': Link,
    'result-panel': ResultPanel,
    'text-field': TextField
  },
  initData () {
    return {
      word: '',
      result: [],
      isLoading: false,
    }
  },
  updateQuery (word) {
    this.data.set('word', word)
    this.query(word)
  },
  routerChangeHandler (e, config) {
    this.updateQuery(e.query.word || '')
  },
  async query (val) {
    this.data.set('isLoading', true)
    const data = await fetchJsonp(`http://app.tgbus.com/kanji/ToJp.ashx?keyword=${encodeURIComponent(val)}&encode=gb2312&app=3ds`).then(res => res.json())
    this.data.set('isLoading', false)
    const result = []
    global.history.pushState({}, val, `/#/${val}`)
    for (const key in data) {
      const kanji = data[key].kanji.length ? data[key].kanji : [data[key].kanji]
      result.push({
        han: key,
        kanji: kanji
      })
    }
    this.data.set('result', result)
  },
  attached () {
    const word = this.data.get('route').query.word
    this.updateQuery(word || '')
    this.watch('word', debounce(this.query, 500))
    this.routerChangeHandler = this.routerChangeHandler.bind(this)
    router.listen(this.routerChangeHandler)
  },
  detached () {
    router.unlisten(this.routerChangeHandler)
  }
}
</script>

<style lang="stylus">
html
  font-size 100px
  background-color: #abc
  background-image: repeating-linear-gradient(120deg, rgba(255,255,255,.1), rgba(255,255,255,.1) 5px, transparent 10px, transparent 60px),repeating-linear-gradient(60deg, rgba(255,255,255,.1), rgba(255,255,255,.1) 5px, transparent 5px, transparent 60px),linear-gradient(60deg, rgba(0,0,0,.1) 25%, transparent 25%, transparent 75%, rgba(0,0,0,.1) 75%, rgba(0,0,0,.1)),linear-gradient(120deg, rgba(0,0,0,.1) 25%, transparent 25%, transparent 75%, rgba(0,0,0,.1) 75%, rgba(0,0,0,.1))
  background-size: 140px 240px
body
  margin 0
h1
  font-size .36rem
  text-align center

@media (max-width: 639px)
  body
    padding-top .5rem
  h1
    display none

@media (min-width: 640px)
  h1
    display block
</style>